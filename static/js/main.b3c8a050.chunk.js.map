{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Content","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleOutsideClick","bind","assertThisInitialized","handleInsideClick","isFocussed","toggleFocus","isOpen","alert","react_default","a","createElement","react_outside_click_handler_default","onOutsideClick","console","log","className","concat","useCapture","type","defaultValue","onFocus","maybeRenderDatePicker","Component","Container","_this2","state","setState","App_Content","App","App_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAIMA,qBACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,mBAAqBP,EAAKO,mBAAmBC,KAAxBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAC1BA,EAAKU,kBAAoBV,EAAKU,kBAAkBF,KAAvBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAJRA,wEAUjB,OAFuBG,KAAKJ,MAApBY,wDAKW,IACXC,EAAgBT,KAAKJ,MAArBa,YAEHT,KAAKU,WAIVD,GAAY,GAEZE,MAAM,yFAGY,IACVF,EAAgBT,KAAKJ,MAArBa,YAEHT,KAAKU,UACRD,GAAY,mDAKd,OAAKT,KAAKU,SAGRE,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAqBG,eAAgB,kBAAMC,QAAQC,IAAI,gCACrDN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBAJQ,sCASpB,IACCX,EAAeR,KAAKJ,MAApBY,WAEFW,EAAS,UAAAC,OAAaZ,EAAa,YAAc,IAEvD,OACEI,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAqBG,eAAgBhB,KAAKI,mBAAoBiB,YAAU,GACtET,EAAAC,EAAAC,cAAA,OAAKK,UAAWA,GACdP,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,aAAa,gBAAgBC,QAASxB,KAAKO,oBAC7DP,KAAKyB,iCArDMC,cA4DhBC,cACJ,SAAAA,EAAY/B,GAAO,IAAAgC,EAAA,OAAA9B,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACjBC,EAAA9B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KAAMJ,KAEDiC,MAAQ,CACXrB,YAAY,GAGdoB,EAAKnB,YAAcmB,EAAKnB,YAAYJ,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAA8B,KAPFA,2EAUPpB,GACVR,KAAK8B,SAAS,iBAAO,CAAEtB,iDAGhB,IACCA,EAAeR,KAAK6B,MAApBrB,WAER,OACEI,EAAAC,EAAAC,cAACiB,EAAD,CAASvB,WAAYA,EAAYC,YAAaT,KAAKS,qBAnBjCiB,aAiCTM,mLANX,OACEpB,EAAAC,EAAAC,cAACmB,EAAD,aAHYP,aC7EEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b3c8a050.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport OutsideClickHandler from 'react-outside-click-handler';\nimport './App.css';\n\nclass Content extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOutsideClick = this.handleOutsideClick.bind(this);\n    this.handleInsideClick = this.handleInsideClick.bind(this);\n  }\n\n  isOpen() {\n    const { isFocussed } = this.props;\n\n    return isFocussed;\n  }\n\n  handleOutsideClick() {\n    const { toggleFocus } = this.props\n\n    if (!this.isOpen()) {\n      return;\n    }\n\n    toggleFocus(false);\n\n    alert('You clicked outside of this component!!!');\n  }\n\n  handleInsideClick() {\n    const { toggleFocus } = this.props\n\n    if (!this.isOpen()) {\n      toggleFocus(true);\n    }\n  }\n\n  maybeRenderDatePicker() {\n    if (!this.isOpen()) return null;\n\n    return (\n      <OutsideClickHandler onOutsideClick={() => console.log('clicked outside datepicker')}>\n        <div className=\"DatePicker\" />\n      </OutsideClickHandler>\n    )\n  }\n\n  render() {\n    const { isFocussed } = this.props;\n\n    const className = `Element${isFocussed ? '_focussed' : ''}`\n\n    return (\n      <OutsideClickHandler onOutsideClick={this.handleOutsideClick} useCapture>\n        <div className={className}>\n          <input type=\"text\" defaultValue=\"Click Outside\" onFocus={this.handleInsideClick} />\n          {this.maybeRenderDatePicker()}\n        </div>\n      </OutsideClickHandler>\n    );\n  }\n}\n\nclass Container extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isFocussed: false,\n    }\n\n    this.toggleFocus = this.toggleFocus.bind(this);\n  }\n\n  toggleFocus(isFocussed) {\n    this.setState(() => ({ isFocussed }));\n  }\n\n  render() {\n    const { isFocussed } = this.state;\n\n    return (\n      <Content isFocussed={isFocussed} toggleFocus={this.toggleFocus} />\n    );\n  }\n}\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Container />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}